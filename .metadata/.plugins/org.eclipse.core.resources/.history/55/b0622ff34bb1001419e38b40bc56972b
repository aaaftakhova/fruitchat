package client;

import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;

import javax.swing.JTextArea;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

import client.ChatClient;
import javax.swing.border.EmptyBorder;

public class PrivateChatFrame extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JTextField textField;
	private JButton btnSendButton;
	private String sender;
	private String empfaenger;
	private JTextArea textArea;
	private boolean enableWriting = true;
	
	public PrivateChatFrame (final ChatClient cc, final String login1, final String login2, String msg) {
		this.sender = login1;
		this.empfaenger = login2;
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		setTitle("PrivateChat with " + login2);
		int height = 300;
		int width = 500;
		Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
		setBounds((d.width - width)/2, (d.height - height)/2, width, height);
		getContentPane().setLayout(new BorderLayout(5, 5));
		
		textArea = new JTextArea();
		textArea.setBorder(new EmptyBorder(5, 5, 5, 5));
		textArea.setEditable(false);
		if (msg.length() > 0) {
			this.displayText(msg);
		}
		getContentPane().add(textArea, BorderLayout.CENTER);
		
		JPanel messagePanel = new JPanel();
		messagePanel.setBorder(new EmptyBorder(0, 5, 5, 5));
		getContentPane().add(messagePanel, BorderLayout.SOUTH);
		messagePanel.setLayout(new BoxLayout(messagePanel, BoxLayout.X_AXIS));
		
		textField = new JTextField();
		messagePanel.add(textField);
		textField.setColumns(10);
		btnSendButton = new JButton("Senden");
		btnSendButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				//TODO check users black list before writing
				if(enableWriting){
					String message = textField.getText();
					displayText("[you]: " + message);
					if (message != null && message.length() > 0) {
						message = "[" + login1 + "]: [private]: " + login2 + " " + message;
						cc.sendDataString(message);
						textField.setText("");
					}
				}
			}
			
			
		});
		
		textField.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == 10) {
					btnSendButton.doClick();
				}
			}
		});
		messagePanel.add(btnSendButton);
		this.setVisible(true);
	}
	
	public String getSender() {
		return this.sender;
	}
	public String getEmpfaenger() {
		return this.empfaenger;
	}
	
	//TODO update Co-speaker state if gets offline

	
	public void displayText(String text) {
		textArea.append(text + "\n");
		repaint();
	}
	public static void setWriteable(ArrayList<PrivateChatFrame> pcf , boolean value){
		for (PrivateChatFrame frame : pcf) {
			frame.enableWriting = value;
			frame.textField.setEditable(value);
		}
	}
	
	public static void update(ArrayList<PrivateChatFrame> pcf, String[] userArray) {
		for (PrivateChatFrame frame : pcf) {
			for (String user : userArray) {
				String name = user.split(" ")[0];
				String state = user.split(" ")[1];
				state = state.substring(1, state.length() - 1);
				boolean value = state.equals("online") ? true : false;
				if (frame.getEmpfaenger().equals(name)) {
					frame.enableWriting = value;
					frame.textField.setEditable(value);
					break;
				}
			}
		}
		
	}
}
